//////////////////////////////////// APPROCH 1 ///////////////////////////////
TC -> O(N2)
SC ->O(1)
TLE

class Solution {
public:
    int maxArea(vector<int>& height) {
        int ans=0;
        for(int L=0;L<height.size();L++){
            for(int R=L+1;R<height.size();R++){
                int area =(R-L) * min(height[L],height[R]);
                ans = max(ans,area);

            }
        }
        return ans;
        
    }
};

//////////////////////////////////// APPROCH 2 ///////////////////////////////
TC -> O(N)
SC ->O(1)
class Solution {
public:
    int maxArea(vector<int>& height) {
        int ans = 0;
        int left = 0;
        int right = height.size() - 1;
        while (left < right) {
            int area = (right - left) * min(height[left], height[right]);
            ans = max(ans, area);
            if (height[left] < height[right]) {
                left += 1;
            } else if (height[left] > height[right]) {
                right -= 1;

            } else {
                // if they are equal
                right -= 1;
            }
        }
        return ans;
    }
};
