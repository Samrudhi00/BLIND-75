//////////////////////////////// APPROACH 1 //////////////////////////////////////
TC -> O(N2)
SC -> O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> v;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    v.push_back(i);
                    v.push_back(j);
                }
            }
        }
        return v;
    }
};

//////////////////////////////// APPROACH 2 //////////////////////////////////////
TC -> O(N)
SC -> O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       map<int,int> mpp;
       for(int i=0;i<nums.size();i++){
        int a = nums[i];
        int moreNedded = target - a;
        if(mpp.find(moreNedded) != mpp.end()){
            return {mpp[moreNedded], i};
        }
        mpp[a]=i;
       }
       return {-1,-1};

    }
};



