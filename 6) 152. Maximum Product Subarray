//////////////////////////////////////// APPROACH 1 //////////////////////////////
TC ->O(N2)
SC ->O(1)
TLE
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int max_Prod = INT_MIN;
        for(int i=0;i<nums.size();i++){
            int curr_max = 1;
            for(int j=i;j<nums.size();j++){
                curr_max *= nums[j]; 
                max_Prod = max(max_Prod, curr_max);
            }
        }
        return max_Prod;
    }
};

//////////////////////////////////////// APPROACH 2 //////////////////////////////
TC ->O(N)
SC ->O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if (nums.empty()) return 0;

        int currMax = nums[0], currMin = nums[0], ans = nums[0];

        for (int i = 1; i < nums.size(); i++) {
            int temp = max({nums[i], currMax * nums[i], currMin * nums[i]});   //we are using this with temp beacuse we are also storing the curr max value 
            currMin = min({nums[i], currMax * nums[i], currMin * nums[i]});
            currMax = temp;

            ans = max(ans, currMax);
        }

        return ans;
    }
};

