///////////////////////////////////////////////// APPROCH 1 //////////////////////////////////
TC -> O(N^2)
SC -> O(1)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;
        for(int i=0;i<n;i++){
            int prod = 1;
            for(int j=0;j<n;j++){
                if(i == j)continue;
                prod *= nums[j];
            }
            ans.push_back(prod);
        }
        return ans;
        
    }
};

///////////////////////////////////////////////// APPROCH 2 //////////////////////////////////
TC -> O(N)
SC -> O(N)+O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n);
        vector<int> post(n);
        
        pre[0] = 1;
        for (int i = 1; i < n; ++i) {
            pre[i] = nums[i - 1] * pre[i - 1];
        }
        
        post[n - 1] = 1;
        for (int i = n - 2; i >= 0; --i) {
            post[i] = nums[i + 1] * post[i + 1];
        }
        
        vector<int> ans(n);
        for (int i = 0; i < n; ++i) {
            ans[i] = pre[i] * post[i];
        }
        
        return ans;
    }
};


///////////////////////////////////////////////// APPROCH 3 //////////////////////////////////
TC -> O(N)
SC -> O(1)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> output(n);
        output[0] = 1;
        for(int i=1; i<n; i++){
            output[i] = output[i-1] * nums[i-1];
        }
        int right = 1;
        for(int i=n-1; i>=0; i--){
            output[i] *= right;
            right *= nums[i];
        }
        return output;
    }
};
