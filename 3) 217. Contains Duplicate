///////////////////////////////  APPROCH 1 ////////////////////////////////////
TC ->O(N2)
SC ->O(1)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }

        return false;
    }
};

///////////////////////////////  APPROCH 2 ////////////////////////////////////
TC ->O(NlogN)
SC ->O(1)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }

        return false;
    }
};

///////////////////////////////  APPROCH 3 ////////////////////////////////////
TC ->O(N)
SC ->O(N)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        return nums.size() > set<int>(nums.begin(), nums.end()).size();
    }
};
