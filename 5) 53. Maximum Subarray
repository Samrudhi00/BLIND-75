/////////////////////////////////////  APPROCH 1 /////////////////////////////
TC ->O(N3)
SC ->O(1)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi =INT_MIN;
        for(int i=0;i<nums.size();i++){
            for(int j=i;j<nums.size();j++){
                int sum = 0;
                for(int k=i;k<=j;k++){
                    sum += nums[k];
                }
                maxi = max(maxi,sum);
            }
        }
        return maxi;
        
    }
};

/////////////////////////////////////  APPROCH 2 /////////////////////////////
TC ->O(N2)
SC ->O(1)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi =INT_MIN;
        for(int i=0;i<nums.size();i++){
            int curr_sum = 0;
            for (int j = i; j < nums.size(); ++j) {
                curr_sum += nums[j]; 
                maxi = max(maxi, curr_sum);
            }
        }
        return maxi;
        
    }
};

/////////////////////////////////////  APPROCH 3 /////////////////////////////
------ Kadanes Algorithm -----
TC ->O(N)
SC ->O(1)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi = INT_MIN;
        int currSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (currSum < 0) {
                currSum = 0;
            }
            currSum += nums[i];
            maxi = max(maxi, currSum);
        }
        return maxi;
    }
};
