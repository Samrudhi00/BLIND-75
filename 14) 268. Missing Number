///////////////////////////////// APPROCH 1 //////////////////////////
TC ->O(N)
SC ->O(N)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        unordered_map<int, bool> mp;
        for (int num : nums) {
            mp[num] = true;
        }
        
        int n = nums.size();
        for (int i = 0; i <= n; ++i) {
            if (mp.find(i) == mp.end()) {
                return i;
            }
        }
        
        return -1; 
    }
};

///////////////////////////////// APPROCH 2 //////////////////////////
TC ->O(N)
SC ->O(N)
#include <vector>
#include <unordered_set>

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        unordered_set<int> numSet(nums.begin(), nums.end());
        
        int n = nums.size();
        for (int i = 0; i <= n; ++i) {
            if (numSet.find(i) == numSet.end()) {
                return i;
            }
        }
        
        return -1; 
    }
};


///////////////////////////////// APPROCH 3 //////////////////////////
TC ->O(2N)
SC ->O(1)
#include <vector>
#include <unordered_set>

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int xor_all = 0;
        int xor_num = 0;
        for(int i=0;i<=n;i++){
           xor_all ^= i;
        }
        for(int num:nums){
            xor_num ^= num;

        }
        return xor_all ^ xor_num;

    }
};


///////////////////////////////// APPROCH 4 //////////////////////////
TC ->O(N)
SC ->O(1)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int expected_sum= (n*(n+1)/2);
        int actual_sum=0;
        for(int i=0;i<n;i++){
            actual_sum += nums[i];
        }
        return expected_sum - actual_sum;
    }
};
